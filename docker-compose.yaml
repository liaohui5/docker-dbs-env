version: "3"

networks:
  dbnet:
  nginx:

services:
  nginx: # https://hub.docker.com/_/nginx
    container_name: nginx
    image: nginx:stable
    networks:
      - dbnet
      - nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf:/etc/nginx                       # nginx 配置文件目录
      - ./nginx/www:/usr/share/nginx/html             # nginx 网站根目录

  mongodb: # https://hub.docker.com/_/mongo
    container_name: mongo
    image: mongo:latest
    networks:
      - dbnet
    ports:
      - "27017:27017"
    volumes:
      - ./mongo/db:/data/db                           # mongoDB 的数据
      - ./mongo/conf:/data/configdb                   # mongoDB 的配置文件
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: secret
  mysql: # https://hub.docker.com/_/mysql
    container_name: mysql
    image: mysql:5.7
    command: ["--character-set-server=utf8mb4", "--collation-server=utf8mb4_general_ci"]
    networks:
      - dbnet
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/db:/var/lib/mysql                     # 映射mysql的数据文件目录
      - ./mysql/conf:/etc/mysql                       # 映射mysql的配置文件目录
      - ./mysql/init:/docker-entrypoint-initdb.d      # mysql启动时: 初始化执行的sql文件(注意: 如果要执行初始化SQL文件, 就必须使用 MYSQL_USER 新建一个用户, 不能直接使用 root 用户)
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: test_db                         # mysql 启动时自动创建的数据库
      MYSQL_USER: dev_user                            # mysql 启动时自动创建的用户
      MYSQL_PASSWORD: secret                          # mysql 启动时创建 dev_user 这个用户的密码
  redis: # https://hub.docker.com/_/redis
    container_name: redis
    image: redis:6.2
    command: redis-server /etc/redis/redis.conf
    networks:
      - dbnet
    ports:
      - "6379:6379"
    volumes:
      - ./redis/conf/redis.conf:/etc/redis/redis.conf # redis 配置文件
      - ./redis/db:/data                              # redis 数据
